import asyncio
import logging
import os
import re
from datetime import datetime, timezone
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from config import Config
from telegram_client import TelegramClient
from utils.api_client import ApiFootballClient
from utils.keep_alive import keep_alive
from modules.jogos_elite import JogosEliteModule
from modules.regressao_media import RegressaoMediaModule

# Filtro para censurar tokens nos logs (COMPLETO)
class RedactSecretsFilter(logging.Filter):
    def __init__(self):
        super().__init__()
        self.token = os.getenv("TELEGRAM_BOT_TOKEN", "")
        self.token_pattern = re.compile(r'bot\d{6,}:[A-Za-z0-9_-]+')
    
    def filter(self, record: logging.LogRecord) -> bool:
        msg = record.getMessage()
        if self.token:
            msg = msg.replace(self.token, "<REDACTED>")
        msg = self.token_pattern.sub("bot<REDACTED>", msg)
        record.msg = msg
        record.args = ()
        return True

# Configurar logging ANTES de qualquer uso
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

# Aplicar filtro e reduzir verbosidade
redact_filter = RedactSecretsFilter()
for handler in logging.getLogger().handlers:
    handler.addFilter(redact_filter)

logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("httpcore").setLevel(logging.WARNING)
logging.getLogger("aiohttp.access").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)

# Vari√°vel global para acesso ao bot (AP√ìS configura√ß√£o de logging)
bot_instance = None

class BotConsolidado:
    """Bot de Futebol Consolidado - VERS√ÉO OTIMIZADA PARA ECONOMIA DE API"""
    
    def __init__(self):
        global bot_instance
        bot_instance = self  # Permitir acesso global ao bot
        
        logger.info("üöÄ Iniciando Bot Futebol Consolidado - MODO ECONOMIA")
        
        # Inicializar clientes
        self.telegram_client = TelegramClient(Config.TELEGRAM_BOT_TOKEN)
        self.api_client = ApiFootballClient(Config.API_FOOTBALL_KEY)
        
        # Inicializar m√≥dulos
        self.modules = {}
        
        if Config.ELITE_ENABLED:
            try:
                self.modules['elite'] = JogosEliteModule(self.telegram_client, self.api_client)
                logger.info("‚úÖ M√≥dulo Elite inicializado")
            except Exception as e:
                logger.error(f"‚ùå Erro ao inicializar m√≥dulo Elite: {e}")
        
        if Config.REGRESSAO_ENABLED:
            try:
                self.modules['regressao'] = RegressaoMediaModule(self.telegram_client, self.api_client)
                logger.info("‚úÖ M√≥dulo Regress√£o inicializado")
            except Exception as e:
                logger.error(f"‚ùå Erro ao inicializar m√≥dulo Regress√£o: {e}")
        
        logger.info("‚ö†Ô∏è M√≥dulo Campeonatos desativado temporariamente para economia de API")
        
        # Inicializar scheduler
        self.scheduler = AsyncIOScheduler(timezone="UTC")
        self._setup_scheduler()
        
        logger.info(f"üì¶ M√≥dulos ativos: {list(self.modules.keys())}")
    
    def _setup_scheduler(self):
    """Configura agendamento otimizado para 2000 requests/dia"""
    
    # === EXECU√á√ïES ESTRAT√âGICAS PARA M√ÅXIMA COBERTURA ===
    
    # Elite: 4x por dia (cobertura completa sem desperd√≠cio)
    if Config.ELITE_ENABLED and 'elite' in self.modules:
        elite_hours = [7, 11, 15, 19]  # 08:00, 12:00, 16:00, 20:00 Lisboa
        for i, hour in enumerate(elite_hours):
            self.scheduler.add_job(
                self.modules['elite'].execute,
                'cron',
                hour=hour,
                minute=0,
                id=f'elite_{i+1}',
                max_instances=1,
                coalesce=True,
                misfire_grace_time=3600
            )
        logger.info("‚è∞ Elite agendado: 4x/dia (08:00, 12:00, 16:00, 20:00 Lisboa)")
    
    # Regress√£o: 6x por dia (an√°lise frequente para oportunidades)
    if Config.REGRESSAO_ENABLED and 'regressao' in self.modules:
        regressao_hours = [8, 10, 12, 14, 17, 20]  # Hor√°rios estrat√©gicos
        for i, hour in enumerate(regressao_hours):
            self.scheduler.add_job(
                self.modules['regressao'].execute,
                'cron',
                hour=hour,
                minute=30,  # 30 min ap√≥s Elite para evitar conflitos
                id=f'regressao_{i+1}',
                max_instances=1,
                coalesce=True,
                misfire_grace_time=3600
            )
        logger.info("‚è∞ Regress√£o agendado: 6x/dia (hor√°rios otimizados)")
    
    # Campeonatos: Re-ativado 1x por dia
    if hasattr(Config, 'CAMPEONATOS_ENABLED') and Config.CAMPEONATOS_ENABLED:
        if 'campeonatos' in self.modules:
            self.scheduler.add_job(
                self.modules['campeonatos'].execute,
                'cron',
                hour=9,
                minute=0,
                id='campeonatos_daily',
                max_instances=1,
                coalesce=True,
                misfire_grace_time=3600
            )
            logger.info("‚è∞ Campeonatos agendado: 1x/dia √†s 10:00 Lisboa")
    
    # === TESTE IMEDIATO PARA VERIFICA√á√ÉO ===
    from datetime import timedelta
    
    now_utc = datetime.now(timezone.utc)
    
    # Teste Elite em 2 minutos
    if Config.ELITE_ENABLED and 'elite' in self.modules:
        test_time = now_utc + timedelta(minutes=2)
        self.scheduler.add_job(
            self.modules['elite'].execute,
            'date',
            run_date=test_time,
            id='elite_test_now',
            max_instances=1
        )
        logger.info(f"üß™ TESTE Elite: {test_time.strftime('%H:%M:%S')} UTC")
    
    # Teste Regress√£o em 4 minutos
    if Config.REGRESSAO_ENABLED and 'regressao' in self.modules:
        test_time = now_utc + timedelta(minutes=4)
        self.scheduler.add_job(
            self.modules['regressao'].execute,
            'date',
            run_date=test_time,
            id='regressao_test_now',
            max_instances=1
        )
        logger.info(f"üß™ TESTE Regress√£o: {test_time.strftime('%H:%M:%S')} UTC")
    
    # Monitor API: 3x por dia
    self.scheduler.add_job(
        self.log_api_usage,
        'cron',
        hour='8,14,20',
        minute=45,
        id='api_monitor'
    )
    
    # Keep-alive: 30 min
    self.scheduler.add_job(
        keep_alive, 
        'interval', 
        minutes=30,
        id='keep_alive'
    )

async def log_api_usage(self):
    """Monitor API com informa√ß√µes da conta"""
    try:
        stats = self.api_client.get_daily_usage_stats()
        
        # Status baseado no uso do bot
        if stats['bot_percentage'] < 40:
            status_emoji = "üü¢"
            status_text = "EXCELENTE"
        elif stats['bot_percentage'] < 60:
            status_emoji = "üü°" 
            status_text = "BOM"
        elif stats['bot_percentage'] < 80:
            status_emoji = "üü†"
            status_text = "ATEN√á√ÉO"
        else:
            status_emoji = "üî¥"
            status_text = "CR√çTICO"
        
        # Informa√ß√µes da conta (se dispon√≠veis)
        account_info = ""
        if stats['account_remaining'] is not None:
            account_info = f"\nüè¶ **Conta:** {stats['account_remaining']}/{stats['account_limit']} restantes"
        
        message = f"""{status_emoji} **Relat√≥rio API Di√°rio**

ü§ñ **Bot:** {stats['bot_used']}/{stats['bot_limit']} ({stats['bot_percentage']}%)
‚ö° **Restante Bot:** {stats['bot_remaining']} requests{account_info}
üìÖ **Reset:** {stats['reset_time']}
üóìÔ∏è **Data:** {stats['date']}

üí° **Status:** {status_text}
üéØ **Estrat√©gia:** Elite 4x + Regress√£o 6x + Campeonatos 1x/dia
üìä **Quota Alocada:** 2000/7500 requests totais da conta"""
        
        await self.telegram_client.send_admin_message(message)
        logger.info(f"üìä API Usage: {stats['bot_used']}/{stats['bot_limit']} ({stats['bot_percentage']}%) - {status_text}")
        
    except Exception as e:
        logger.error(f"‚ùå Erro no monitor de API: {e}")


    async def send_startup_message(self):
        """Envia mensagem de inicializa√ß√£o"""
        try:
            api_stats = self.api_client.get_monthly_usage_stats()
            
            startup_message = f"""üöÄ **BOT FUTEBOL CONSOLIDADO INICIADO**

üîß **MODO ECONOMIA ATIVADO**
üìä M√≥dulos ativos: {len(self.modules)}
‚è∞ Jobs agendados: {len(self.scheduler.get_jobs())}

üìà **M√≥dulos:**
""" + (f"‚úÖ Elite: 1x/dia √†s 08:00 Lisboa\n" if 'elite' in self.modules else "") + \
(f"‚úÖ Regress√£o: 1x/dia √†s 10:00 Lisboa\n" if 'regressao' in self.modules else "") + \
f"‚ùå Campeonatos: Desativado (economia)" + f"""

üîß **API Status:**
üìä Usado: {api_stats['used']}/{api_stats['limit']} ({api_stats['percentage_used']}%)
‚ö†Ô∏è Restante: {api_stats['remaining']} requests
üìÖ M√™s: {api_stats['month']}

üí° Otimiza√ß√£o implementada para trabalhar dentro do limite gratuito
‚è∞ {datetime.utcnow().strftime('%d/%m/%Y %H:%M')} UTC"""
            
            await self.telegram_client.send_admin_message(startup_message)
            logger.info("üì® Mensagem de startup enviada")
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao enviar mensagem de startup: {e}")

    async def start(self):
        """Inicia o bot"""
        try:
            self.scheduler.start()
            logger.info("‚è∞ Scheduler iniciado")
            
            await self.send_startup_message()
            await keep_alive()
            
            logger.info("‚úÖ Bot iniciado com sucesso!")
            logger.info(f"üì¶ M√≥dulos ativos: {list(self.modules.keys())}")
            logger.info(f"‚è∞ Jobs agendados: {len(self.scheduler.get_jobs())}")
            logger.info("üîÑ Entrando no loop principal...")
            
            while True:
                await asyncio.sleep(60)
                
        except KeyboardInterrupt:
            logger.info("üõë Interrup√ß√£o do usu√°rio detectada")
        except Exception as e:
            logger.error(f"üí• Erro cr√≠tico: {e}")
            await self.telegram_client.send_admin_message(f"üí• Erro cr√≠tico no bot: {e}")
        finally:
            await self.shutdown()

    async def shutdown(self):
        """Encerra o bot graciosamente"""
        logger.info("üõë Encerrando bot...")
        
        if hasattr(self, 'scheduler') and self.scheduler.running:
            self.scheduler.shutdown(wait=True)
            logger.info("‚è∞ Scheduler encerrado")
        
        # Parar servidor keep-alive
        try:
            from utils.keep_alive import stop_server
            await stop_server()
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao parar keep-alive: {e}")
        
        try:
            await self.telegram_client.send_admin_message("üõë Bot encerrado")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao enviar mensagem de shutdown: {e}")
        
        logger.info("üëã Bot encerrado com sucesso")

async def main():
    """Fun√ß√£o principal"""
    # Dashboard de configura√ß√£o
    print("=" * 60)
    print("üöÄ BOT FUTEBOL CONSOLIDADO - CONFIGURA√á√ÉO")
    print("=" * 60)
    print("üîë CREDENCIAIS:")
    print(f"   üì± Telegram Token: {'‚úÖ Configurado' if Config.TELEGRAM_BOT_TOKEN else '‚ùå N√£o configurado'}")
    print(f"   ‚öΩ API Football: {'‚úÖ Configurado' if Config.API_FOOTBALL_KEY else '‚ùå N√£o configurado'}")
    print("üì¶ M√ìDULOS HABILITADOS:")
    print(f"   {'‚úÖ' if Config.ELITE_ENABLED else '‚ùå'} ELITE (1x/dia √†s 08:00 Lisboa)")
    print(f"   {'‚úÖ' if Config.REGRESSAO_ENABLED else '‚ùå'} REGRESSAO (1x/dia √†s 10:00 Lisboa)")
    print(f"   ‚ùå CAMPEONATOS (desativado temporariamente)")
    print("‚öôÔ∏è CONFIGURA√á√ïES T√âCNICAS:")
    print(f"   üåê Porta: {os.getenv('PORT', 8080)}")
    print(f"   üìà Limite API: 2000 requests/m√™s")
    print(f"   üîß Modo: Economia")
    print("=" * 60)
    
    # Verificar vari√°veis obrigat√≥rias
    required_vars = ['TELEGRAM_BOT_TOKEN', 'API_FOOTBALL_KEY']
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        logger.error(f"‚ùå Vari√°veis de ambiente n√£o configuradas: {missing_vars}")
        return
    
    bot = BotConsolidado()
    await bot.start()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë Aplica√ß√£o interrompida pelo usu√°rio")
    except Exception as e:
        logger.error(f"üí• Erro fatal: {e}")
